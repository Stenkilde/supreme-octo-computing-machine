// Generated by typings
// Source: node_modules/@tricom/tricom-ui-base/definitions/tricom-ui-base.d.ts
declare namespace tricom.ui.base {
    /*************************************************************************************************/
    /* Services */
    interface IDialogService {
        showSuccessMessage(targetEvent: any, title: string, texts: Array<string>, prompt?: boolean): angular.IPromise<boolean>;
        showErrorMessage(targetEvent: any, title: string, texts: Array<string>, prompt?: boolean): angular.IPromise<boolean>;
        showInfoMessage(targetEvent: any, title: string, texts: Array<string>, prompt?: boolean): angular.IPromise<boolean>;
        showWarningMessage(targetEvent: any, title: string, texts: Array<string>, prompt?: boolean): angular.IPromise<boolean>;
    }

    interface IUserService {
        getCurrentUser(): angular.IPromise<ITricomUser>;
        getUserClaims(): angular.IPromise<Array<number>>;
    }

    interface IBaseUrlService {
        getUrlInfo(): ITricomUrlInfo;
        getSessionId(): string;
        getBaseUrl(): string;
        getSiteName(): string;

        buildAbsoluteUrl(path): string;
        buildAdministrationServiceUrl(...args: any[]): string;
        buildAuthenticationServiceUrl(...args: any[]): string;
        buildDashboardServiceUrl(...args: any[]): string;
        buildFileLibraryServiceUrl(...args: any[]): string;
        buildLogServiceUrl(...args: any[]): string;
        buildNavigationServiceUrl(...args: any[]): string;
        buildProfileServiceUrl(...args: any[]): string;
        buildResourceServiceUrl(...args: any[]): string;
        buildTenderServiceUrl(...args: any[]): string;
        buildTimeLogServiceUrl(...args: any[]): string;
        buildTolkServiceUrl(...args: any[]): string;
        buildSupportServiceUrl(...args: any[]): string;
        buildProcurementServiceUrl(...args: any[]): string;

        redirectToLogin(): void;
    }

    interface IShellMenuService {
        set(items: Array<IShellMenuItem>);
        clear(): void;

        createCallbackAction(configuration: IShellMenuItemConfiguration, callback: (parameters: any) => void, callbackParameters?: any): IShellMenuItem;
    }

    interface IShellNavigationService {
        navigateTo(applicationName: string, parameters?: string);
    }

    enum ErrorCode {
        Business = 1,
        Technical = 2
    }

    interface IError {
        text: string;
        errorCode: ErrorCode
    }

    interface IWarning {
        text: string;
    }

    interface IInformation {
        text: string;
    }

    interface IBaseResponse {
        errors: Array<IError>;
        warnings: Array<IWarning>;
        information: Array<IInformation>;
        hasErrors: boolean;
        hasWarnings: boolean;
        hasInformation: boolean;
    }

    interface ITricomUrlInfo {
        sessionId: string;
        path: string;
    }

    interface ITricomUser {
        id: string;
        organisationId: string;
        organisationName: string;

        username: string;
        isImpersonating: boolean;

        firstName: string;
        middleName: string;
        lastName: string;

        email: string;
        phone: string;

        claims: Array<number>;

        hasClaim(claim: number): boolean;
    }

    interface IShellMenuAction {
        execute(frame: any): void;
    }

    interface IShellMenuItemConfiguration {
        name?: string;
        text: string;
        css?: string;
        enabled?: boolean;
        sticky?: boolean;
        active?: boolean;
        lowPriority?: boolean;
    }

    interface IShellMenuItem extends IShellMenuItemConfiguration {
    }

    interface ITricomApplicationLanguagesProvider extends angular.IServiceProvider {
        addApplicationModule(applicationId: string, moduleId?: string): void;
        getApplication(applicationId: string): IApplication;
        moduleExists(application: IApplication, moduleId: string): boolean;
    }

    interface ITricomTranslateService {
        translate(key: string, fallback: string);
    }

    interface IModule {
        name: string;
    }

    interface IApplication {
        name: string;
        modules: Array<IModule>;
    }

    interface ITricomResourceService {

    }

    interface ILanguageKey {
        [name: string]: string
    }

    interface ILanguageContainer {
        [name: string]: IApplicationContainer
    }

    interface IApplicationContainer {
        [name: string]: IModuleContainer
    }

    interface IModuleContainer {
        [name: string]: ILanguageKey
    }

    interface IResource {
        [key: string]: string
    }

    interface IGetLanguageForSiteResponse extends IBaseResponse {
        fields: Array<ILanguageContainer>;
    }
}
